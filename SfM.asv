function [points] = SfM(matrix)
Points = matrix;
%Normalize
shifted_points= Points-repmat(mean(Points,2),1,size(Points,2));

% SVD
[U,W,V] = svd(shifted_points);

U = U(:,1:3);
W = W(1:3,1:3);
V = V(:,1:3);

M = U*sqrt(W);
points = sqrt(W)*V';

% %  
% % % %solve for affine ambiguity
A=[M(1,:);M(3,:);M(5,:)];
L0=eye(3)/pinv(A*A');

%Solve for L
L = lsqnonlin(@myfun,L0,ones(size(L0)));
%Recover C
try
    C = chol(L,'upper');
    % Update M and S
    M = M*C;
points = pinv(C)*S1;

end